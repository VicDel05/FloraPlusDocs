"use strict";(self.webpackChunkflora_plus_docs=self.webpackChunkflora_plus_docs||[]).push([[2203],{1837:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Int4-491d37a8cf644f8573acecd6bb91a6ff.png"},2087:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"codigo","title":"Codigo","description":"En esta secci\xf3n, se explicar\xe1 detalladamente el c\xf3digo y las interfaces utilizadas en el desarrollo de la aplicaci\xf3n AR centrada en plantas. Se abordar\xe1n los aspectos clave de la funcionalidad, como la interacci\xf3n con modelos 3D de plantas, la gesti\xf3n de la interfaz de usuario, la integraci\xf3n con la realidad aumentada y las opciones para capturar y compartir el entorno AR. A trav\xe9s de la descripci\xf3n de las clases y m\xe9todos utilizados, se mostrar\xe1 c\xf3mo cada componente contribuye a la experiencia interactiva y educativa que ofrece la aplicaci\xf3n.","source":"@site/docs/codigo.md","sourceDirName":".","slug":"/codigo","permalink":"/FloraPlusDocs/docs/codigo","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codigo.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Codigo","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Dise\xf1o","permalink":"/FloraPlusDocs/docs/Diseno"},"next":{"title":"Riego-App: Sistema de Riego Autom\xe1tico con Arduino y App","permalink":"/FloraPlusDocs/docs/intro"}}');var i=r(4848),t=r(8453);const s={title:"Codigo",sidebar_position:3},o="Codigo",c={},l=[{value:"Unity",id:"unity",level:2},{value:"Home Unity",id:"home-unity",level:3},{value:"Unity Interface",id:"unity-interface",level:3},{value:"App Settings",id:"app-settings",level:3},{value:"Structure",id:"structure",level:3},{value:"Code Preview",id:"code-preview",level:3},{value:"Visual Studio Code",id:"visual-studio-code",level:2},{value:"1. ARInteractionsManager.cs",id:"1-arinteractionsmanagercs",level:3},{value:"2. DataManager.cs",id:"2-datamanagercs",level:3},{value:"3. GameManager.cs",id:"3-gamemanagercs",level:3},{value:"4. Item.cs",id:"4-itemcs",level:3},{value:"5. ItemButtonManager.cs",id:"5-itembuttonmanagercs",level:3},{value:"6. ShareScreenShot.cs",id:"6-sharescreenshotcs",level:3},{value:"7. UIManager.cs",id:"7-uimanagercs",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"codigo",children:"Codigo"})}),"\n",(0,i.jsx)(n.p,{children:"En esta secci\xf3n, se explicar\xe1 detalladamente el c\xf3digo y las interfaces utilizadas en el desarrollo de la aplicaci\xf3n AR centrada en plantas. Se abordar\xe1n los aspectos clave de la funcionalidad, como la interacci\xf3n con modelos 3D de plantas, la gesti\xf3n de la interfaz de usuario, la integraci\xf3n con la realidad aumentada y las opciones para capturar y compartir el entorno AR. A trav\xe9s de la descripci\xf3n de las clases y m\xe9todos utilizados, se mostrar\xe1 c\xf3mo cada componente contribuye a la experiencia interactiva y educativa que ofrece la aplicaci\xf3n."}),"\n",(0,i.jsx)(n.h2,{id:"unity",children:"Unity"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h3,{id:"home-unity",children:"Home Unity"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("div",{style:{border:"1px solid #ccc",padding:"10px",borderRadius:"8px",textAlign:"center"},children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"Int1",src:r(7424).A+"",width:"567",height:"329"}),"\r\n",(0,i.jsx)("p",{children:"Al ingresar a Unity Hub seleccionamos el proyecto en el cual vamos a trabajar (en este caso es el de fecha m\xe1s reciente ya que estuvimos realizando pruebas con las configuraciones)."})]})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h3,{id:"unity-interface",children:"Unity Interface"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("div",{style:{border:"1px solid #ccc",padding:"10px",borderRadius:"8px",textAlign:"center"},children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"Int1",src:r(8715).A+"",width:"567",height:"319"}),"\r\n",(0,i.jsx)("p",{children:"AUna vez dentro del proyecto podemos visualizar diferentes apartados como pueden ser el directorio donde se encuentran los archivos, una vista de desarrollo para visualizar los cambios que se van agregando, una ventana para ver la ejecuci\xf3n de la aplicaci\xf3n a nivel de proyecto (sin ejecutar el comando build), el men\xfa de herramientas que nos proporciona todas las opciones para desarrollar la aplicaci\xf3n."})]})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h3,{id:"app-settings",children:"App Settings"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("div",{style:{border:"1px solid #ccc",padding:"10px",borderRadius:"8px",textAlign:"center"},children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"Int1",src:r(7586).A+"",width:"567",height:"534"}),"\r\n",(0,i.jsx)("p",{children:"Aqui tenemos las configuraciones para construir la aplicaci\xf3n una vez est\xe9 terminada (o para realizar pruebas en los dispositivos), es la parte donde se elige a que plataforma est\xe1 dirigido y para este proyecto se us\xf3 Android como objetivo.."})]})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h3,{id:"structure",children:"Structure"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("div",{style:{border:"1px solid #ccc",padding:"10px",borderRadius:"8px",textAlign:"center"},children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"Int1",src:r(1837).A+"",width:"566",height:"193"}),"\r\n",(0,i.jsx)("p",{children:"Dentro de la carpeta Assets que contiene todos los recursos necesarios para que la aplicaci\xf3n funcione correctamente, se encuentra el directorio llamado scripts el cual contiene cada uno de los archivos codificados con el lenguaje C# y es donde se aplica la arquitectura del proyecto."})]})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h3,{id:"code-preview",children:"Code Preview"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("div",{style:{border:"1px solid #ccc",padding:"10px",borderRadius:"8px",textAlign:"center"},children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"Int1",src:r(8804).A+"",width:"231",height:"567"}),"\r\n",(0,i.jsx)("p",{children:"Al seleccionar un archivo script se mostrar\xe1 una peque\xf1a previsualizaci\xf3n del c\xf3digo, adem\xe1s de, algunas caracter\xedsticas adicionales."})]})}),"\n",(0,i.jsx)(n.h2,{id:"visual-studio-code",children:"Visual Studio Code"}),"\n",(0,i.jsx)(n.h3,{id:"1-arinteractionsmanagercs",children:"1. ARInteractionsManager.cs"}),"\n",(0,i.jsx)(n.p,{children:"Este c\xf3digo en C# es un script de Unity dise\xf1ado para gestionar interacciones en una aplicaci\xf3n de realidad aumentada (AR) utilizando ARFoundation. Su objetivo principal es permitir al usuario colocar, mover, rotar y eliminar un modelo 3D sobre una superficie detectada en el mundo real a trav\xe9s de la c\xe1mara del dispositivo."}),"\n",(0,i.jsx)(n.p,{children:"Aqu\xed te explico las partes clave y para qu\xe9 sirve cada una:"}),"\n",(0,i.jsx)(n.p,{children:"\ud83e\udde9 Prop\xf3sitos Generales del Script\r\nDetectar planos AR y posicionar un puntero sobre ellos."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Colocar un modelo 3D en ese plano."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Mover el modelo 3D arrastrando con un dedo."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Rotar el modelo 3D usando dos dedos."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Eliminar el modelo 3D cuando se desee."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.XR.ARFoundation;\r\nusing UnityEngine.XR.ARSubsystems;\r\nusing UnityEngine.EventSystems;\r\n\r\npublic class ARInteractionsManager : MonoBehaviour\r\n{\r\n    [SerializeField] private Camera aRCamera;\r\n    private ARRaycastManager aRRaycastManager;\r\n    private List<ARRaycastHit> hits = new List<ARRaycastHit>();\r\n\r\n    private GameObject aRPointer;\r\n    private GameObject item3DModel;\r\n    private GameObject itemSelected;\r\n\r\n    private bool isInitialPosition;\r\n    private bool isOverUI;\r\n    private bool isOver3DModel;\r\n\r\n    private Vector2 initialTouchPos;\r\n\r\n    public GameObject Item3DModel\r\n    {\r\n        set\r\n        {\r\n            item3DModel = value;\r\n            item3DModel.transform.position = aRPointer.transform.position;\r\n            item3DModel.transform.parent = aRPointer.transform;\r\n            isInitialPosition = true;\r\n        }\r\n    }\r\n\r\n    void Start()\r\n    {\r\n        aRPointer = transform.GetChild(0).gameObject;\r\n        aRRaycastManager = FindObjectOfType<ARRaycastManager>();\r\n        GameManager.instance.OnMainMenu += SetItemPosition;\r\n    }\r\n\r\n    void Update()\r\n    {\r\n        if (isInitialPosition)\r\n        {\r\n            Vector2 middlePointScreen = new Vector2(Screen.width / 2, Screen.height / 2);\r\n            aRRaycastManager.Raycast(middlePointScreen, hits, TrackableType.Planes);\r\n            if (hits.Count > 0)\r\n            {\r\n                transform.position = hits[0].pose.position;\r\n                transform.rotation = hits[0].pose.rotation;\r\n                aRPointer.SetActive(true);\r\n                isInitialPosition = false;\r\n            }\r\n        }\r\n\r\n        if (Input.touchCount > 0)\r\n        {\r\n            Touch touchOne = Input.GetTouch(0);\r\n            if (touchOne.phase == TouchPhase.Began)\r\n            {\r\n                var touchPosition = touchOne.position;\r\n                isOverUI = IsTapOverUI(touchPosition);\r\n                isOver3DModel = IsTapOver3DModel(touchPosition);\r\n            }\r\n\r\n            if (touchOne.phase == TouchPhase.Moved)\r\n            {\r\n                if (aRRaycastManager.Raycast(touchOne.position, hits, TrackableType.Planes))\r\n                {\r\n                    Pose hitPose = hits[0].pose;\r\n                    if (!isOverUI && isOver3DModel)\r\n                    {\r\n                        transform.position = hitPose.position;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (Input.touchCount == 2)\r\n            {\r\n                Touch touchTwo = Input.GetTouch(1);\r\n                if (touchOne.phase == TouchPhase.Began || touchTwo.phase == TouchPhase.Began)\r\n                {\r\n                    initialTouchPos = touchTwo.position - touchOne.position;\r\n                }\r\n\r\n                if (touchOne.phase == TouchPhase.Moved || touchTwo.phase == TouchPhase.Moved)\r\n                {\r\n                    Vector2 currentTouchPos = touchTwo.position - touchOne.position;\r\n                    float angle = Vector2.SignedAngle(initialTouchPos, currentTouchPos);\r\n                    item3DModel.transform.rotation = Quaternion.Euler(0, item3DModel.transform.eulerAngles.y - angle, 0);\r\n                    initialTouchPos = currentTouchPos;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isOver3DModel && item3DModel == null && !isOverUI)\r\n        {\r\n            GameManager.instance.ARPosition();\r\n            Item3DModel = itemSelected;\r\n            item3DModel = null;\r\n            aRPointer.SetActive(true);\r\n            transform.position = item3DModel.transform.position;\r\n            item3DModel.transform.parent = aRPointer.transform;\r\n        }\r\n    }\r\n\r\n    private bool IsTapOver3DModel(Vector2 touchPosition)\r\n    {\r\n        Ray ray = aRCamera.ScreenPointToRay(touchPosition);\r\n        if (Physics.Raycast(ray, out RaycastHit hit3DModel))\r\n        {\r\n            if (hit3DModel.collider.CompareTag("Item"))\r\n            {\r\n                itemSelected = hit3DModel.transform.gameObject;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private bool IsTapOverUI(Vector2 touchPosition)\r\n    {\r\n        PointerEventData eventData = new PointerEventData(EventSystem.current);\r\n        eventData.position = new Vector2(touchPosition.x, touchPosition.y);\r\n\r\n        List<RaycastResult> result = new List<RaycastResult>();\r\n        EventSystem.current.RaycastAll(eventData, result);\r\n\r\n        return result.Count > 0;\r\n    }\r\n\r\n    private void SetItemPosition()\r\n    {\r\n        if (item3DModel != null)\r\n        {\r\n            item3DModel.transform.parent = null;\r\n            aRPointer.SetActive(false);\r\n            item3DModel = null;\r\n        }\r\n    }\r\n\r\n    public void DeleteItem()\r\n    {\r\n        if (item3DModel != null)\r\n        {\r\n            Destroy(item3DModel);\r\n            aRPointer.SetActive(false);\r\n            GameManager.instance.MainMenu();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-datamanagercs",children:"2. DataManager.cs"}),"\n",(0,i.jsx)(n.p,{children:"Forma parte del sistema de interfaz para un men\xfa de selecci\xf3n de objetos en una aplicaci\xf3n, probablemente de realidad aumentada o similar. Su objetivo principal es crear din\xe1micamente botones en el men\xfa basados en una lista de objetos (\xedtems), cada uno con su nombre, descripci\xf3n, imagen y modelo 3D."}),"\n",(0,i.jsx)(n.p,{children:"\ud83c\udfaf \xbfPara qu\xe9 sirve este c\xf3digo?\r\nEl script DataManager se encarga de:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Tomar una lista de objetos (items)."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Crear un bot\xf3n para cada objeto cuando el usuario abre el men\xfa de \xedtems."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Asociar a cada bot\xf3n la informaci\xf3n visual y funcional del objeto (texto, imagen, modelo 3D)."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Asegurarse de que los botones se creen una sola vez, usando un evento del GameManager"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\npublic class DataManager : MonoBehaviour\r\n{\r\n    [SerializeField] private List<Item> items = new List<Item>();\r\n    [SerializeField] private GameObject buttonContainer;\r\n    [SerializeField] private ItemButtonManager itemButtonManager;\r\n\r\n    // Start is called before the first frame update\r\n    void Start()\r\n    {\r\n        GameManager.instance.OnItemsMenu += CreateButtons;\r\n\r\n    }\r\n    private void CreateButtons()\r\n    {\r\n        foreach (var item in items)\r\n        {\r\n            ItemButtonManager itemButton;\r\n            itemButton = Instantiate(itemButtonManager, buttonContainer.transform);\r\n            itemButton.ItemName = item.ItemName;\r\n            itemButton.ItemDescription = item.ItemDescription;\r\n            itemButton.ItemImage = item.ItemImage;\r\n\r\n            itemButton.Item3DModel = item.Item3DModel;\r\n            itemButton.name = item.ItemName;\r\n\r\n\r\n        }\r\n        GameManager.instance.OnItemsMenu -= CreateButtons;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-gamemanagercs",children:"3. GameManager.cs"}),"\n",(0,i.jsx)(n.p,{children:"Este c\xf3digo en C# define la clase GameManager, que act\xfaa como controlador principal del flujo del juego o aplicaci\xf3n. Se trata de un singleton, lo que significa que solo puede haber una instancia activa a la vez, y ofrece una forma centralizada de emitir eventos que otros scripts pueden suscribirse para reaccionar a cambios en el estado de la aplicaci\xf3n."}),"\n",(0,i.jsx)(n.p,{children:"\ud83c\udfaf \xbfPara qu\xe9 sirve este c\xf3digo?\r\nSirve para:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Coordinar transiciones entre men\xfas (por ejemplo, principal, selecci\xf3n de \xedtems, posici\xf3n en AR)."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Enviar eventos a otros scripts para que realicen acciones espec\xedficas cuando cambia el estado del juego."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Actuar como gestor global accesible desde cualquier parte mediante GameManager.instance."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing System;\r\n\r\npublic class GameManager : MonoBehaviour\r\n{\r\n    public event Action OnMainMenu;\r\n    public event Action OnItemsMenu;\r\n    public event Action OnARPosition;\r\n\r\n    public static GameManager instance;\r\n\r\n    private void Awake()\r\n    {\r\n        if (instance != null && instance != this)\r\n        {\r\n            Destroy(gameObject);\r\n        }\r\n        else\r\n        {\r\n            instance = this;\r\n        }\r\n    }\r\n    // Start is called before the first frame update\r\n    void Start()\r\n    {\r\n        MainMenu();\r\n    }\r\n\r\n    public void MainMenu()\r\n    {\r\n        OnMainMenu?.Invoke();\r\n        Debug.Log("Main Menu Actived");\r\n    }\r\n\r\n    public void ItemsMenu()\r\n    {\r\n        OnItemsMenu?.Invoke();\r\n        Debug.Log("Items Menu Actived");\r\n    }\r\n\r\n    public void ARPosition()\r\n    {\r\n        OnARPosition?.Invoke();\r\n        Debug.Log("AR Position Actived");\r\n    }\r\n\r\n    public void CloseAPP()\r\n    {\r\n        Application.Quit();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-itemcs",children:"4. Item.cs"}),"\n",(0,i.jsx)(n.p,{children:"Este sistema permite a los usuarios seleccionar objetos 3D desde una galer\xeda interactiva y colocarlos en el mundo real usando realidad aumentada (AR)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Ingrese al men\xfa de \xedtems."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Vea una galer\xeda con nombre, descripci\xf3n e imagen."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Seleccione un objeto con un bot\xf3n."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"El objeto 3D aparezca y pueda colocarse en el entorno AR."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\n[CreateAssetMenu]\r\npublic class Item : ScriptableObject\r\n{\r\n    public string ItemName;\r\n    public Sprite ItemImage;\r\n    public string ItemDescription;\r\n    public GameObject Item3DModel;\r\n}\r\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-itembuttonmanagercs",children:"5. ItemButtonManager.cs"}),"\n",(0,i.jsx)(n.p,{children:"La funcionalidad de este script es gestionar cada bot\xf3n que representa un \xedtem 3D en la interfaz de usuario. Cada bot\xf3n permite a los usuarios seleccionar un \xedtem y mostrar su modelo 3D en el espacio de realidad aumentada (AR). Para lograr esto, se instancian ciertos objetos y se asignan propiedades a la UI de manera din\xe1mica."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.UI;\r\n\r\npublic class ItemButtonManager : MonoBehaviour\r\n{\r\n    private string itemName;\r\n    private string itemDescription;\r\n    private Sprite itemImage;\r\n    private GameObject item3DModel;\r\n    private ARInteractionsManager interactionsManager;\r\n\r\n    public string ItemName\r\n    {\r\n        set\r\n        {\r\n            itemName = value;\r\n        }\r\n    }\r\n    public string ItemDescription { set => itemDescription = value;}\r\n\r\n    public Sprite ItemImage { set => itemImage = value; }\r\n\r\n    public GameObject Item3DModel { set => item3DModel = value;}\r\n\r\n    // Start is called before the first frame update\r\n    void Start()\r\n    {\r\n\r\n        transform.GetChild(0).GetComponent<Text>().text = itemName;\r\n        transform.GetChild(1).GetComponent<RawImage>().texture = itemImage.texture;\r\n        transform.GetChild(2).GetComponent<Text>().text = itemDescription;\r\n\r\n        var button = GetComponent<Button>();\r\n        button.onClick.AddListener(GameManager.instance.ARPosition);\r\n        button.onClick.AddListener(Create3DModel);\r\n\r\n        interactionsManager = FindObjectOfType<ARInteractionsManager>();\r\n\r\n\r\n    }\r\n\r\n    private void Create3DModel()\r\n    {\r\n        interactionsManager.Item3DModel = Instantiate(item3DModel);\r\n    }\r\n\r\n}\r\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"6-sharescreenshotcs",children:"6. ShareScreenShot.cs"}),"\n",(0,i.jsx)(n.p,{children:"Este script se encarga de capturar una screenshot de la pantalla actual de la aplicaci\xf3n y compartirla usando el sistema NativeShare. Adem\xe1s, realiza algunas manipulaciones de la interfaz, como activar o desactivar ciertos contenidos de AR y el men\xfa principal."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.XR.ARFoundation; // A\ufffdade esta l\ufffdnea\r\nusing System.IO; // Necesario para Path y File\r\nusing NativeShareNamespace; // Si est\ufffds usando NativeShare\r\n\r\npublic class ShareScreenShot : MonoBehaviour\r\n{\r\n    [SerializeField] private GameObject mainMenuCanvas;\r\n    private ARPointCloudManager aRPointCloudManager;\r\n\r\n    void Start()\r\n    {\r\n        aRPointCloudManager = FindObjectOfType<ARPointCloudManager>();\r\n    }\r\n\r\n    public void TakeScreenShot()\r\n    {\r\n        TurnOnOffARContents();\r\n        StartCoroutine(TakeScreenshotAndShare());\r\n    }\r\n\r\n    private void TurnOnOffARContents()\r\n    {\r\n        if (aRPointCloudManager == null) return; // Protecci\ufffdn contra null reference\r\n\r\n        var points = aRPointCloudManager.trackables;\r\n        foreach (var point in points)\r\n        {\r\n            point.gameObject.SetActive(!point.gameObject.activeSelf);\r\n        }\r\n        mainMenuCanvas.SetActive(!mainMenuCanvas.activeSelf);\r\n    }\r\n\r\n    private IEnumerator TakeScreenshotAndShare()\r\n    {\r\n        yield return new WaitForEndOfFrame();\r\n\r\n        Texture2D ss = new Texture2D(Screen.width, Screen.height, TextureFormat.RGB24, false);\r\n        ss.ReadPixels(new Rect(0, 0, Screen.width, Screen.height), 0, 0);\r\n        ss.Apply();\r\n\r\n        string filePath = Path.Combine(Application.temporaryCachePath, "shared img.png");\r\n        File.WriteAllBytes(filePath, ss.EncodeToPNG());\r\n\r\n        Destroy(ss);\r\n\r\n        new NativeShare().AddFile(filePath)\r\n            .SetSubject("Subject goes here").SetText("Hey.... ")\r\n            .SetCallback((result, shareTarget) => Debug.Log("Share result: " + result + ", selected app: " + shareTarget))\r\n            .Share();\r\n\r\n        TurnOnOffARContents();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"7-uimanagercs",children:"7. UIManager.cs"}),"\n",(0,i.jsx)(n.p,{children:"Este script controla la animaci\xf3n de las pantallas dentro de la interfaz de usuario de la aplicaci\xf3n. Usando el framework DOTween, se manejan animaciones de escala y movimiento de los distintos Canvas (pantallas) seg\xfan el estado de la aplicaci\xf3n."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing DG.Tweening;\r\n\r\npublic class UIManager : MonoBehaviour\r\n{\r\n    [SerializeField] private GameObject mainManuCanvas;\r\n    [SerializeField] private GameObject itemsManuCanvas;\r\n    [SerializeField] private GameObject ARPositionCanvas;\r\n    // Start is called before the first frame update\r\n    void Start()\r\n    {\r\n        GameManager.instance.OnMainMenu += ActivateMainMenu;\r\n        GameManager.instance.OnItemsMenu += ActivateItemsMenu;\r\n        GameManager.instance.OnARPosition += ActivateARPosition;\r\n    }\r\n\r\n    private void ActivateMainMenu()\r\n    {\r\n        mainManuCanvas.transform.GetChild(0).transform.DOScale(new Vector3(1, 1, 1), 0.3f);\r\n        mainManuCanvas.transform.GetChild(1).transform.DOScale(new Vector3(1, 1, 1), 0.3f);\r\n        mainManuCanvas.transform.GetChild(2).transform.DOScale(new Vector3(1, 1, 1), 0.3f);\r\n\r\n        itemsManuCanvas.transform.GetChild(0).transform.DOScale(new Vector3(0, 0, 0), 0.5f);\r\n        itemsManuCanvas.transform.GetChild(1).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n        itemsManuCanvas.transform.GetChild(1).transform.DOMoveY(180, 0.3f);\r\n\r\n        ARPositionCanvas.transform.GetChild(0).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n        ARPositionCanvas.transform.GetChild(1).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n    }\r\n\r\n    private void ActivateItemsMenu()\r\n    {\r\n        mainManuCanvas.transform.GetChild(0).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n        mainManuCanvas.transform.GetChild(1).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n        mainManuCanvas.transform.GetChild(2).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n\r\n        itemsManuCanvas.transform.GetChild(0).transform.DOScale(new Vector3(1, 1, 1), 0.5f);\r\n        itemsManuCanvas.transform.GetChild(1).transform.DOScale(new Vector3(1, 1, 1), 0.3f);\r\n        itemsManuCanvas.transform.GetChild(1).transform.DOMoveY(300, 0.3f);\r\n    }\r\n\r\n    private void ActivateARPosition()\r\n    {\r\n        mainManuCanvas.transform.GetChild(0).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n        mainManuCanvas.transform.GetChild(1).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n        mainManuCanvas.transform.GetChild(2).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n\r\n        itemsManuCanvas.transform.GetChild(0).transform.DOScale(new Vector3(0, 0, 0), 0.5f);\r\n        itemsManuCanvas.transform.GetChild(1).transform.DOScale(new Vector3(0, 0, 0), 0.3f);\r\n        itemsManuCanvas.transform.GetChild(1).transform.DOMoveY(180, 0.3f);\r\n\r\n        ARPositionCanvas.transform.GetChild(0).transform.DOScale(new Vector3(1, 1, 1), 0.3f);\r\n        ARPositionCanvas.transform.GetChild(1).transform.DOScale(new Vector3(1, 1, 1), 0.3f);\r\n    }\r\n\r\n}\r\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7424:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Int1-0b632a898d52d1b6a1e278ca1887bead.png"},7586:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Int3-f193f44194361e106c0b4079f12c55c7.png"},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(6540);const i={},t=a.createContext(i);function s(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(t.Provider,{value:n},e.children)}},8715:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Int2-fec71972895873e733acec7acbcea2d2.png"},8804:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/Int5-4aa8ddd5fe28f77f55e1c2c0ccc1ab12.png"}}]);